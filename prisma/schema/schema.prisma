// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
    previewFeatures = ["prismaSchemaFolder"]
}

enum Role {
  USER
  ADMIN
  ARTISAN
  DRIVER
  GUEST
}

datasource db {
  provider     = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")

}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String       @id @default(cuid())
  name                String?
  username            String?
  email               String?      @unique
  emailVerified       DateTime?
  image               String?
  title               String?
  accounts            Account[]
  sessions            Session[]


  role                Role         @default(GUEST)
  depots              Depot[]
  messagingProfile    Profile?

  createdAt           DateTime              @default(now())
  generatedImages     GeneratedImages[]
  generationSurveys   GenerationSurvey[]
  variations          Variation[]
  modifications       Modification[]
  guestSurveys        GuestSurvey[]



      // Forum
    createdSubreddits Subreddit[]    @relation("CreatedBy")
    subscriptions     Subscription[]
    posts             Post[]
    forumComments     ForumComment[]
    commentVotes      CommentVote[]
    votes             Vote[]

    shops             Shop[]

    // Upcycle
    upcycleResults UpcycleResult[]
    notifications Notification[]



}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id              String   @id @default(cuid())
  processes       String?
  materials       String?
  principles      String?
  description     String?
  unmoderatedForm Boolean  @default(false)
  moderatedForm   Boolean  @default(false)
  hiddenForm      Boolean  @default(false)
  privateForm     Boolean  @default(false)
  supplyChain     Boolean  @default(false)
  messagingOptIn  Boolean  @default(false)

  shopId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  businessType    String?
  experience      String?
  practice        String?
  country         String?
  state           String?
  email           String?

  ownerId         String?

  @@index([ownerId])
}






model GuestSurvey {
  id                String    @id @default(cuid())
  name              String?
  country           String?
  state             String?
  artisanalPractice String?
  otherPractice     String?
  email             String
  createdAt         DateTime  @default(now())
  userId            String?
  user              User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}