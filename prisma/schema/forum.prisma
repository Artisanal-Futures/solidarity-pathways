
enum VoteType {
  UP
  DOWN
}



model Subreddit {
  id          String   @id @default(cuid())
  description String?
  isPublic    Boolean   @default(true)
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  posts       Post[]

  creatorId   String?
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String
  comments    ForumComment[] 
  votes       Vote[]
}

model ForumComment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   ForumComment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   ForumComment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
  deletedAt DateTime?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   ForumComment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}
