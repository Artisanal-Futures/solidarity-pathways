

// Solidarity Pathways
enum RouteStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
  NOT_STARTED
  FAILED
  EDIT
  CREATE
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum DriverType {
  FULL_TIME
  PART_TIME
  TEMP
  VOLUNTEER
}

enum JobType {
  PICKUP
  DELIVERY
  PICKUP_AND_DELIVERY
  SERVICE
  ADMIN
  OTHER
}

model Road {
  id        String      @id @default(cuid())
  name      String
  points    RoadPoint[]
  depotId   String
  depot     Depot       @relation(fields: [depotId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model RoadPoint {
  id        String  @id @default(cuid())
  roadId    String
  road      Road    @relation(fields: [roadId], references: [id], onDelete: Cascade)
  latitude  Float
  longitude Float
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roadId])
}


model Depot {
  id              String    @id @default(cuid())
  ownerId         String    @unique //One owner can have one depot
  name            String?   //Name of the depot
  magicCode       String   

 
  address         Address? 

  drivers         Driver[] //All drivers associated with the depot
  vehicles        Vehicle[] //All vehicles associated with the depot
  clients         Client[] //All clients associated with the depot
  jobs            Job[] //All jobs associated with the depot
  users           User[] //All users associated with the depot
  routes          Route[] //All routes associated with the depot
  roads           Road[] //  All dividing roads associated with the depot
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id              String    @id @default(cuid())
  formatted       String    //This this the full address
  street          String?
  additional      String?
  city            String?
  state           String?
  postal_code     String?
  country         String?
  latitude        Float
  longitude       Float

  depotId  String?                @unique  //Main Address of the depot
  depot    Depot?                 @relation( fields: [depotId], references: [id], onDelete: Cascade) 

  driverId  String?               @unique  //Main Address of the driver
  driver    Driver?               @relation( fields: [driverId], references: [id], onDelete: Cascade) 

  startVehicleId    String?       @unique
  startVehicle      Vehicle?      @relation("StartAddressToVehicle", fields: [startVehicleId], references: [id], onDelete: Cascade)

  endVehicleId      String?       @unique
  endVehicle        Vehicle?      @relation("EndAddressToVehicle", fields: [endVehicleId], references: [id], onDelete:Cascade)


  clientId          String?       @unique  //Main Address of the client
  client            Client?       @relation( fields: [clientId], references: [id], onDelete: Cascade)

  jobId          String?        @unique  //Main Address of the client
  job            Job?           @relation( fields: [jobId], references: [id], onDelete: Cascade)
 


  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt


}

model Schedule {
  id    Int     @id @default(autoincrement())
  day   WeekDay
  start String
  end   String
  driverId String


  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@index([driverId])
}



model Driver {
  id                String      @id @default(cuid())
  type              DriverType  @default(FULL_TIME)
  depotId           String
  depot             Depot       @relation(fields: [depotId], references: [id], onDelete: Cascade)
  name              String
  address           Address? 
  phone             String
  email             String
  schedule          Schedule[]
  defaultVehicleId  String?
  vehicles          Vehicle[]
  profile           Profile?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  @@index([depotId])
}

model Vehicle {
  id                String              @id @default(cuid())
  depotId           String
  depot             Depot               @relation(fields: [depotId], references: [id], onDelete: Cascade)
  driverId          String?
  driver            Driver?             @relation(fields: [driverId], references: [id])

  
  startAddress      Address?             @relation("StartAddressToVehicle")
  endAddress        Address?             @relation("EndAddressToVehicle")

  shiftStart        Int                 //Start of shift in unix time
  shiftEnd          Int                 //Start of shift in unix time
  capacity          Int?                //Optional: Capacity of the vehicle (i.e. max number of units it can carry )
  maxTasks          Int?                //Optional: Max number of tasks the vehicle can do in one shift
  maxTravelTime     Int?                //Optional: Max travel time in seconds
  maxDistance       Int?                //Optional: Max distance in meters
  breaks            Break[]
  notes             String?             //Optional: Any additional notes about the vehicle
  cargo             String?             //Optional: Any specific nots on its cargo, contents, etc.
  routeId           String?
  route             Route?              @relation(fields: [routeId], references: [id])
  optimizedRouteId  String?
  optimizedRoute    OptimizedRoutePath? 
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt


  @@index([driverId])
  @@index([routeId])
  @@index([optimizedRouteId])
  @@index([depotId])
}

model Break {
  id             Int      @id @default(autoincrement())
  start          Int?     //Optional: Start of break in unix time
  end            Int?     //Optional: End of break in unix time
  duration       Int
  vehicleId      String
  vehicle        Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)


  @@index([vehicleId])
}

model Client {
  id            String    @id @default(cuid())
  depotId       String
  depot         Depot     @relation(fields: [depotId], references: [id], onDelete: Cascade)
  name          String

  address       Address?  
  phone         String?
  email         String    @unique  //Unique: Email of the client
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  defaultJobId  String?   //Optional: Default job for the client. Like a go-to order or something
  jobs          Job[]


  @@index([depotId])
}

model Job {
  id              String    @id @default(cuid())
  type            JobType
  depotId         String
  depot           Depot     @relation(fields: [depotId], references: [id], onDelete: Cascade)
  address         Address?
  clientId        String?
  client          Client?   @relation(fields: [clientId], references: [id])
  prepTime        Int       //Preparation time in seconds
  serviceTime     Int       //Service time in seconds
  priority        Int       //Priority of the job (1-100)
  timeWindowStart Int
  timeWindowEnd   Int
  routeId         String?
  route           Route?    @relation(fields: [routeId], references: [id])
  isOptimized     Boolean   @default(false)
  notes           String?
  order           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  optimizedStopId String?
  optimizedStop   OptimizedStop? 


  @@index([clientId])
  @@index([routeId])
  @@index([depotId])
}



model Route {
  id              String      @id @default(cuid())
  depotId         String
  depot           Depot       @relation(fields: [depotId], references: [id], onDelete: Cascade)
  jobs            Job[]
  vehicles        Vehicle[]
  optimizedRoute  OptimizedRoutePath[]
  status          RouteStatus @default(EDIT)
  optimizedData   String?     @db.Text
  deliveryAt      DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([depotId])
}

model OptimizedRoutePath {
  id            String            @id @default(cuid())
  routeId       String
  route         Route             @relation(fields: [routeId], references: [id], onDelete: Cascade)
  vehicleId     String            @unique
  vehicle       Vehicle           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  stops         OptimizedStop[]
  distance      Float?
  startTime     Int?
  endTime       Int?
  status        RouteStatus @default(NOT_STARTED)
  geoJson       String @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([routeId])
}

model OptimizedStop {
  id              String              @id @default(cuid())
  routePathId     String
  jobId           String?             @unique
  job             Job?                @relation(fields: [jobId], references: [id], onDelete: Cascade)
  routePath       OptimizedRoutePath  @relation(fields: [routePathId], references: [id], onDelete: Cascade)
  arrival         Int
  departure       Int
  duration        Int
  prep            Int
  type            String
  notes           String?
  order           String?
  status          RouteStatus
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([routePathId])
}







